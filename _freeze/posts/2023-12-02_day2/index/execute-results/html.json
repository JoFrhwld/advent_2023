{
  "hash": "f2c9f0ef146fba1f873860df32a4b25f",
  "result": {
    "markdown": "---\ntitle: \"Day 2\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(stringr)\nlibrary(tidyr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(purrr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_data <- read_delim(\"sample.txt\", delim = \":\", col_names = F)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 5 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \":\"\nchr (2): X1, X2\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncubes_to_df <- function(x){\n  x |> \n    str_split(\",\", simplify = T) |> \n    str_squish()->\n    cube_draws\n  \n  tibble(draws = cube_draws) |> \n    separate_wider_delim(draws, names = c(\"n\", \"color\"), delim = \" \") |> \n    mutate(n = as.numeric(n)) |> \n    pivot_wider(\n      names_from = color, values_from = n\n    )\n}\ncubes_to_df(\"3 blue, 4 red\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n   blue   red\n  <dbl> <dbl>\n1     3     4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_data |> \n  mutate(\n    X2 = map(X2, ~.x |> \n               str_split(pattern = \";\", simplify = T) |> \n               str_squish()),\n    dfs = map(X2, ~map(.x, cubes_to_df) |> \n                list_rbind() |> \n                replace_na(list(\n                  red = 0,\n                  green = 0,\n                  blue = 0)\n                ) |> \n                mutate(draw = row_number())\n    )\n  ) |> \n  unnest(dfs) |> \n  mutate(game_numbers = str_extract(X1, r\"(\\d+)\") |> as.numeric()) ->\n  sample_all_games\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_all_games |> \n  group_by(game_numbers) |> \n  filter(\n    !any(red  > 12),\n    !any(blue > 14),\n    !any(green > 13)\n  ) |> \n  count(game_numbers) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n# Groups:   game_numbers [3]\n  game_numbers     n\n         <dbl> <int>\n1            1     3\n2            2     3\n3            5     2\n```\n:::\n:::\n\n\nOk, let's go!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- read_delim(\"input.txt\", delim = \":\", col_names = F)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 100 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \":\"\nchr (2): X1, X2\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninput |> \n    mutate(\n    X2 = map(X2, ~.x |> \n               str_split(pattern = \";\", simplify = T) |> \n               str_squish()),\n    dfs = map(X2, ~map(.x, cubes_to_df) |> \n                list_rbind() |> \n                replace_na(list(\n                  red = 0,\n                  green = 0,\n                  blue = 0)\n                ) |> \n                mutate(draw = row_number())\n    )\n  ) |> \n  unnest(dfs) |> \n  mutate(game_numbers = str_extract(X1, r\"(\\d+)\") |> as.numeric()) ->\n  input_all_games\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(input_all_games)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 449\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_all_games |> \n  group_by(game_numbers) |> \n  filter(\n    !any(red  > 12),\n    !any(blue > 14),\n    !any(green > 13)\n  ) |> \n  count(game_numbers) |> \n  ungroup() |> \n  pull(game_numbers) |> \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2105\n```\n:::\n:::\n\n\n## Part 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_all_games |> \n  group_by(game_numbers) |> \n  summarise(\n    across(\n      red:green, max\n    )\n  ) |> \n  mutate(power = red * blue * green) |> \n  pull(power) |> \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72422\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}